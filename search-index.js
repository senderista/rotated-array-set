var N=null,E="",T="t",U="u",searchIndex={};
var R=["is_sorted","Returns `true` if the elements of the iterator are sorted…","is_sorted_until_by","IsSorted","sortedvec","usize","option","difference","intersection","result","into_iter","to_owned","clone_into","try_from","try_into","borrow_mut","type_id","borrow","typeid","size_hint","symmetricdifference","formatter","SortedVec","IntoIter","Difference","SymmetricDifference","Intersection","An ordered set based on a 2-level rotated array."];
searchIndex["is_sorted"]={"doc":"Extends `Iterator` with three algorithms, `is_sorted`,…","i":[[5,R[2],R[0],E,N,[[["f"]],[R[5]]]],[8,R[3],E,"Extends `Iterator` with `is_sorted`, `is_sorted_by`, and…",N,N],[11,R[0],E,R[1],0,[[["self"]],["bool"]]],[11,"is_sorted_by",E,R[1],0,[[["self"],["f"]],["bool"]]],[11,"is_sorted_by_key",E,R[1],0,[[["self"],["f"]],["bool"]]],[11,R[2],E,"Returns the first unsorted pair of items in the iterator…",0,[[["f"]]]]],"p":[[8,R[3]]]};
searchIndex["sorted_vec"]={"doc":R[27],"i":[[3,R[22],"sorted_vec",R[27],N,N],[3,"Iter",E,"An iterator over the items of a `SortedVec`.",N,N],[3,R[23],E,"An owning iterator over the items of a `SortedVec`.",N,N],[3,R[24],E,"A lazy iterator producing elements in the difference of…",N,N],[3,R[25],E,"A lazy iterator producing elements in the symmetric…",N,N],[3,R[26],E,"A lazy iterator producing elements in the intersection of…",N,N],[3,"Union",E,"A lazy iterator producing elements in the union of…",N,N],[11,"new",E,"Makes a new `SortedVec` without any heap allocations.",0,[[],["self"]]],[11,"with_capacity",E,"Constructs a new, empty `SortedVec<T>` with the specified…",0,[[[R[5]]],[R[4]]]],[11,"clear",E,"Clears the set, removing all values.",0,[[["self"]]]],[11,"contains",E,"Returns `true` if the set contains a value.",0,[[["self"],[T]],["bool"]]],[11,"is_disjoint",E,"Returns `true` if `self` has no elements in common with…",0,[[["self"],[R[4]]],["bool"]]],[11,"is_subset",E,"Returns `true` if the set is a subset of another, i.e.,…",0,[[["self"],[R[4]]],["bool"]]],[11,"is_superset",E,"Returns `true` if the set is a superset of another, i.e.,…",0,[[["self"],[R[4]]],["bool"]]],[11,"get",E,"Returns a reference to the value in the set, if any, that…",0,[[["self"],[T]],[[R[6]],[T]]]],[11,"rank",E,"Returns the rank of the value in the set if it exists (as…",0,[[["self"],[T]],[[R[9],[R[5],R[5]]],[R[5]]]]],[11,"select",E,"Returns a reference to the value in the set, if any, with…",0,[[["self"],[R[5]]],[[R[6]],[T]]]],[11,"insert",E,"Adds a value to the set.",0,[[["self"],[T]],["bool"]]],[11,"remove",E,"Removes a value from the set. Returns whether the value…",0,[[["self"],[T]],["bool"]]],[11,"take",E,"Removes and returns the value in the set, if any, that is…",0,[[["self"],[T]],[R[6]]]],[11,"append",E,"Moves all elements from `other` into `Self`, leaving…",0,[[["self"]]]],[11,"split_off",E,"Splits the collection into two at `value`. Returns…",0,[[["self"],[T]],["self"]]],[11,"truncate",E,"Truncates the sorted sequence, keeping the first `len`…",0,[[["self"],[R[5]]]]],[11,"len",E,"Returns the number of elements in the set.",0,[[["self"]],[R[5]]]],[11,"is_empty",E,"Returns `true` if the set contains no elements.",0,[[["self"]],["bool"]]],[11,"iter",E,"Gets a double-ended iterator that visits the values in the…",0,[[["self"]],["iter"]]],[11,"range",E,"Constructs a double-ended iterator over a sub-range of…",0,[[["self"],["r"]],["iter"]]],[11,R[7],E,"Visits the values representing the difference, i.e., the…",0,[[[R[4]],["self"]],[R[7]]]],[11,"symmetric_difference",E,"Visits the values representing the symmetric difference,…",0,[[[R[4]],["self"]],[R[20]]]],[11,R[8],E,"Visits the values representing the intersection, i.e., the…",0,[[[R[4]],["self"]],[R[8]]]],[11,"union",E,"Visits the values representing the union, i.e., all the…",0,[[[R[4]],["self"]],["union"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[10],E,E,0,[[],["i"]]],[11,R[11],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[13],E,E,0,[[[U]],[R[9]]]],[11,R[14],E,E,0,[[],[R[9]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[10],E,E,1,[[],["i"]]],[11,R[11],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[13],E,E,1,[[[U]],[R[9]]]],[11,R[14],E,E,1,[[],[R[9]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[10],E,E,2,[[],["i"]]],[11,R[11],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,R[13],E,E,2,[[[U]],[R[9]]]],[11,R[14],E,E,2,[[],[R[9]]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[10],E,E,3,[[],["i"]]],[11,R[11],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[13],E,E,3,[[[U]],[R[9]]]],[11,R[14],E,E,3,[[],[R[9]]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[18]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[10],E,E,4,[[],["i"]]],[11,R[11],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"],[T]]]],[11,"into",E,E,4,[[],[U]]],[11,R[13],E,E,4,[[[U]],[R[9]]]],[11,R[14],E,E,4,[[],[R[9]]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[18]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[10],E,E,5,[[],["i"]]],[11,R[11],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"],[T]]]],[11,"into",E,E,5,[[],[U]]],[11,R[13],E,E,5,[[[U]],[R[9]]]],[11,R[14],E,E,5,[[],[R[9]]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[15],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[R[18]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[10],E,E,6,[[],["i"]]],[11,R[11],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"],[T]]]],[11,"into",E,E,6,[[],[U]]],[11,R[13],E,E,6,[[[U]],[R[9]]]],[11,R[14],E,E,6,[[],[R[9]]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[15],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[18]]]],[11,"from",E,E,0,[[],["self"]]],[11,"from",E,E,0,[[["vec"]],["self"]]],[11,"next",E,E,1,[[["self"]],[R[6]]]],[11,"nth",E,E,1,[[["self"],[R[5]]],[R[6]]]],[11,"count",E,E,1,[[],[R[5]]]],[11,"last",E,E,1,[[],[R[6]]]],[11,"max",E,E,1,[[],[R[6]]]],[11,"min",E,E,1,[[],[R[6]]]],[11,R[19],E,E,1,[[["self"]]]],[11,"next",E,E,2,[[["self"]],[R[6]]]],[11,"next",E,E,3,[[["self"]],[[R[6]],[T]]]],[11,R[19],E,E,3,[[["self"]]]],[11,"next",E,E,4,[[["self"]],[[R[6]],[T]]]],[11,R[19],E,E,4,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[[R[6]],[T]]]],[11,R[19],E,E,5,[[["self"]]]],[11,"next",E,E,6,[[["self"]],[[R[6]],[T]]]],[11,R[19],E,E,6,[[["self"]]]],[11,"next_back",E,E,1,[[["self"]],[R[6]]]],[11,"nth_back",E,E,1,[[["self"],[R[5]]],[R[6]]]],[11,"default",E,E,0,[[],[R[4]]]],[11,R[10],E,E,0,[[]]],[11,"clone",E,E,0,[[["self"]],[R[4]]]],[11,"clone",E,E,1,[[["self"]],["iter"]]],[11,"clone",E,E,2,[[["self"]],["intoiter"]]],[11,"clone",E,E,3,[[["self"]],[R[7]]]],[11,"clone",E,E,4,[[["self"]],[R[20]]]],[11,"clone",E,E,5,[[["self"]],[R[8]]]],[11,"clone",E,E,6,[[["self"]],["union"]]],[11,"eq",E,E,0,[[["self"]],["bool"]]],[11,"into",E,E,0,[[],["vec"]]],[11,"len",E,E,1,[[["self"]],[R[5]]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[9]]]],[11,"fmt",E,E,1,[[["self"],[R[21]]],[R[9]]]],[11,"fmt",E,E,2,[[["self"],[R[21]]],[R[9]]]],[11,"fmt",E,E,3,[[["self"],[R[21]]],[R[9]]]],[11,"fmt",E,E,4,[[["self"],[R[21]]],[R[9]]]],[11,"fmt",E,E,5,[[["self"],[R[21]]],[R[9]]]],[11,"fmt",E,E,6,[[["self"],[R[21]]],[R[9]]]],[11,"hash",E,E,0,[[["self"],["h"]]]],[11,"from_iter",E,E,0,[[["intoiterator"]],["self"]]]],"p":[[3,R[22]],[3,"Iter"],[3,R[23]],[3,R[24]],[3,R[25]],[3,R[26]],[3,"Union"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);