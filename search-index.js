var N=null,E="",T="t",U="u",searchIndex={};
var R=["sorted_vec","option","result","try_from","borrow","type_id","typeid","borrow_mut","try_into","usize","sortedvec","formatter","SortedVec"];

searchIndex[R[0]]={"doc":E,"i":[[3,R[12],R[0],"A set based on a 2-level rotated array.",N,N],[3,"Iter",E,"An iterator over the items of a `SortedVec`.",N,N],[11,"new",E,"Makes a new `SortedVec` without any heap allocations.",0,[[],["self"]]],[11,"clear",E,"Clears the set, removing all values.",0,[[["self"]]]],[11,"contains",E,"Returns `true` if the set contains a value.",0,[[["self"],[T]],["bool"]]],[11,"get",E,"Returns a reference to the value in the set, if any, that…",0,[[["self"],[T]],[R[1]]]],[11,"at",E,"Returns a reference to the value in the set, if any, with…",0,[[["self"],[R[9]]],[R[1]]]],[11,"insert",E,"Adds a value to the set.",0,[[["self"],[T]],["bool"]]],[11,"remove",E,"Removes a value from the set. Returns whether the value…",0,[[["self"],[T]],["bool"]]],[11,"take",E,"Removes and returns the value in the set, if any, that is…",0,[[["self"],[T]],[R[1]]]],[11,"len",E,"Returns the number of elements in the set.",0,[[["self"]],[R[9]]]],[11,"is_empty",E,"Returns `true` if the set contains no elements.",0,[[["self"]],["bool"]]],[11,"iter",E,"Gets an iterator that visits the values in the `SortedVec`…",0,[[["self"]],["iter"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,N],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[["self"]],[T]]],[11,R[5],E,E,0,[[["self"]],[R[6]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[2]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into_iter",E,E,1,[[["self"]],["i"]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[["self"]],[T]]],[11,R[5],E,E,1,[[["self"]],[R[6]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[2]]]],[11,"from",E,E,0,N],[11,"from",E,E,0,[[["vec"]],["self"]]],[11,"next",E,E,1,[[["self"]],[R[1]]]],[11,"nth",E,E,1,[[["self"],[R[9]]],[R[1]]]],[11,"count",E,E,1,[[["self"]],[R[9]]]],[11,"last",E,E,1,[[["self"]],[R[1]]]],[11,"max",E,E,1,[[["self"]],[R[1]]]],[11,"min",E,E,1,[[["self"]],[R[1]]]],[11,"is_sorted",E,E,1,[[["self"]],["bool"]]],[11,"size_hint",E,E,1,N],[11,"len",E,E,1,[[["self"]],[R[9]]]],[11,"default",E,E,0,[[],[R[10]]]],[11,"next_back",E,E,1,[[["self"]],[R[1]]]],[11,"nth_back",E,E,1,[[["self"],[R[9]]],[R[1]]]],[11,"clone",E,E,0,[[["self"]],[R[10]]]],[11,"fmt",E,E,0,[[["self"],[R[11]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[11]]],[R[2]]]],[11,"from_iter",E,E,0,[[["i"]],["self"]]]],"p":[[3,R[12]],[3,"Iter"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);